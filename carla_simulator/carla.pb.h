// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carla.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_carla_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_carla_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_carla_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_carla_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_carla_2eproto;
namespace carla {
class EmptyRequest;
class EmptyRequestDefaultTypeInternal;
extern EmptyRequestDefaultTypeInternal _EmptyRequest_default_instance_;
class SensorResponse;
class SensorResponseDefaultTypeInternal;
extern SensorResponseDefaultTypeInternal _SensorResponse_default_instance_;
}  // namespace carla
PROTOBUF_NAMESPACE_OPEN
template<> ::carla::EmptyRequest* Arena::CreateMaybeMessage<::carla::EmptyRequest>(Arena*);
template<> ::carla::SensorResponse* Arena::CreateMaybeMessage<::carla::SensorResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace carla {

// ===================================================================

class EmptyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carla.EmptyRequest) */ {
 public:
  inline EmptyRequest() : EmptyRequest(nullptr) {};
  virtual ~EmptyRequest();

  EmptyRequest(const EmptyRequest& from);
  EmptyRequest(EmptyRequest&& from) noexcept
    : EmptyRequest() {
    *this = ::std::move(from);
  }

  inline EmptyRequest& operator=(const EmptyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyRequest& operator=(EmptyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyRequest* internal_default_instance() {
    return reinterpret_cast<const EmptyRequest*>(
               &_EmptyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmptyRequest& a, EmptyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyRequest* New() const final {
    return CreateMaybeMessage<EmptyRequest>(nullptr);
  }

  EmptyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyRequest& from);
  void MergeFrom(const EmptyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carla.EmptyRequest";
  }
  protected:
  explicit EmptyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_carla_2eproto);
    return ::descriptor_table_carla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:carla.EmptyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_carla_2eproto;
};
// -------------------------------------------------------------------

class SensorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carla.SensorResponse) */ {
 public:
  inline SensorResponse() : SensorResponse(nullptr) {};
  virtual ~SensorResponse();

  SensorResponse(const SensorResponse& from);
  SensorResponse(SensorResponse&& from) noexcept
    : SensorResponse() {
    *this = ::std::move(from);
  }

  inline SensorResponse& operator=(const SensorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorResponse& operator=(SensorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorResponse* internal_default_instance() {
    return reinterpret_cast<const SensorResponse*>(
               &_SensorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorResponse& a, SensorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorResponse* New() const final {
    return CreateMaybeMessage<SensorResponse>(nullptr);
  }

  SensorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorResponse& from);
  void MergeFrom(const SensorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carla.SensorResponse";
  }
  protected:
  explicit SensorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_carla_2eproto);
    return ::descriptor_table_carla_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficSignFieldNumber = 7,
    kStatusFieldNumber = 8,
    kSpeedFieldNumber = 1,
    kAccelerationFieldNumber = 2,
    kSteeringFieldNumber = 3,
    kBrakeFieldNumber = 4,
    kThrottleFieldNumber = 5,
    kLaneOffsetFieldNumber = 6,
    kSensorOkFieldNumber = 9,
  };
  // string traffic_sign = 7;
  void clear_traffic_sign();
  const std::string& traffic_sign() const;
  void set_traffic_sign(const std::string& value);
  void set_traffic_sign(std::string&& value);
  void set_traffic_sign(const char* value);
  void set_traffic_sign(const char* value, size_t size);
  std::string* mutable_traffic_sign();
  std::string* release_traffic_sign();
  void set_allocated_traffic_sign(std::string* traffic_sign);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_traffic_sign();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_traffic_sign(
      std::string* traffic_sign);
  private:
  const std::string& _internal_traffic_sign() const;
  void _internal_set_traffic_sign(const std::string& value);
  std::string* _internal_mutable_traffic_sign();
  public:

  // string status = 8;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // float speed = 1;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float acceleration = 2;
  void clear_acceleration();
  float acceleration() const;
  void set_acceleration(float value);
  private:
  float _internal_acceleration() const;
  void _internal_set_acceleration(float value);
  public:

  // float steering = 3;
  void clear_steering();
  float steering() const;
  void set_steering(float value);
  private:
  float _internal_steering() const;
  void _internal_set_steering(float value);
  public:

  // float brake = 4;
  void clear_brake();
  float brake() const;
  void set_brake(float value);
  private:
  float _internal_brake() const;
  void _internal_set_brake(float value);
  public:

  // float throttle = 5;
  void clear_throttle();
  float throttle() const;
  void set_throttle(float value);
  private:
  float _internal_throttle() const;
  void _internal_set_throttle(float value);
  public:

  // float lane_offset = 6;
  void clear_lane_offset();
  float lane_offset() const;
  void set_lane_offset(float value);
  private:
  float _internal_lane_offset() const;
  void _internal_set_lane_offset(float value);
  public:

  // bool sensor_ok = 9;
  void clear_sensor_ok();
  bool sensor_ok() const;
  void set_sensor_ok(bool value);
  private:
  bool _internal_sensor_ok() const;
  void _internal_set_sensor_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:carla.SensorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traffic_sign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  float speed_;
  float acceleration_;
  float steering_;
  float brake_;
  float throttle_;
  float lane_offset_;
  bool sensor_ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_carla_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmptyRequest

// -------------------------------------------------------------------

// SensorResponse

// float speed = 1;
inline void SensorResponse::clear_speed() {
  speed_ = 0;
}
inline float SensorResponse::_internal_speed() const {
  return speed_;
}
inline float SensorResponse::speed() const {
  // @@protoc_insertion_point(field_get:carla.SensorResponse.speed)
  return _internal_speed();
}
inline void SensorResponse::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void SensorResponse::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:carla.SensorResponse.speed)
}

// float acceleration = 2;
inline void SensorResponse::clear_acceleration() {
  acceleration_ = 0;
}
inline float SensorResponse::_internal_acceleration() const {
  return acceleration_;
}
inline float SensorResponse::acceleration() const {
  // @@protoc_insertion_point(field_get:carla.SensorResponse.acceleration)
  return _internal_acceleration();
}
inline void SensorResponse::_internal_set_acceleration(float value) {
  
  acceleration_ = value;
}
inline void SensorResponse::set_acceleration(float value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:carla.SensorResponse.acceleration)
}

// float steering = 3;
inline void SensorResponse::clear_steering() {
  steering_ = 0;
}
inline float SensorResponse::_internal_steering() const {
  return steering_;
}
inline float SensorResponse::steering() const {
  // @@protoc_insertion_point(field_get:carla.SensorResponse.steering)
  return _internal_steering();
}
inline void SensorResponse::_internal_set_steering(float value) {
  
  steering_ = value;
}
inline void SensorResponse::set_steering(float value) {
  _internal_set_steering(value);
  // @@protoc_insertion_point(field_set:carla.SensorResponse.steering)
}

// float brake = 4;
inline void SensorResponse::clear_brake() {
  brake_ = 0;
}
inline float SensorResponse::_internal_brake() const {
  return brake_;
}
inline float SensorResponse::brake() const {
  // @@protoc_insertion_point(field_get:carla.SensorResponse.brake)
  return _internal_brake();
}
inline void SensorResponse::_internal_set_brake(float value) {
  
  brake_ = value;
}
inline void SensorResponse::set_brake(float value) {
  _internal_set_brake(value);
  // @@protoc_insertion_point(field_set:carla.SensorResponse.brake)
}

// float throttle = 5;
inline void SensorResponse::clear_throttle() {
  throttle_ = 0;
}
inline float SensorResponse::_internal_throttle() const {
  return throttle_;
}
inline float SensorResponse::throttle() const {
  // @@protoc_insertion_point(field_get:carla.SensorResponse.throttle)
  return _internal_throttle();
}
inline void SensorResponse::_internal_set_throttle(float value) {
  
  throttle_ = value;
}
inline void SensorResponse::set_throttle(float value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:carla.SensorResponse.throttle)
}

// float lane_offset = 6;
inline void SensorResponse::clear_lane_offset() {
  lane_offset_ = 0;
}
inline float SensorResponse::_internal_lane_offset() const {
  return lane_offset_;
}
inline float SensorResponse::lane_offset() const {
  // @@protoc_insertion_point(field_get:carla.SensorResponse.lane_offset)
  return _internal_lane_offset();
}
inline void SensorResponse::_internal_set_lane_offset(float value) {
  
  lane_offset_ = value;
}
inline void SensorResponse::set_lane_offset(float value) {
  _internal_set_lane_offset(value);
  // @@protoc_insertion_point(field_set:carla.SensorResponse.lane_offset)
}

// string traffic_sign = 7;
inline void SensorResponse::clear_traffic_sign() {
  traffic_sign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SensorResponse::traffic_sign() const {
  // @@protoc_insertion_point(field_get:carla.SensorResponse.traffic_sign)
  return _internal_traffic_sign();
}
inline void SensorResponse::set_traffic_sign(const std::string& value) {
  _internal_set_traffic_sign(value);
  // @@protoc_insertion_point(field_set:carla.SensorResponse.traffic_sign)
}
inline std::string* SensorResponse::mutable_traffic_sign() {
  // @@protoc_insertion_point(field_mutable:carla.SensorResponse.traffic_sign)
  return _internal_mutable_traffic_sign();
}
inline const std::string& SensorResponse::_internal_traffic_sign() const {
  return traffic_sign_.Get();
}
inline void SensorResponse::_internal_set_traffic_sign(const std::string& value) {
  
  traffic_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SensorResponse::set_traffic_sign(std::string&& value) {
  
  traffic_sign_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carla.SensorResponse.traffic_sign)
}
inline void SensorResponse::set_traffic_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  traffic_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carla.SensorResponse.traffic_sign)
}
inline void SensorResponse::set_traffic_sign(const char* value,
    size_t size) {
  
  traffic_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carla.SensorResponse.traffic_sign)
}
inline std::string* SensorResponse::_internal_mutable_traffic_sign() {
  
  return traffic_sign_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SensorResponse::release_traffic_sign() {
  // @@protoc_insertion_point(field_release:carla.SensorResponse.traffic_sign)
  return traffic_sign_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SensorResponse::set_allocated_traffic_sign(std::string* traffic_sign) {
  if (traffic_sign != nullptr) {
    
  } else {
    
  }
  traffic_sign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), traffic_sign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carla.SensorResponse.traffic_sign)
}
inline std::string* SensorResponse::unsafe_arena_release_traffic_sign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla.SensorResponse.traffic_sign)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return traffic_sign_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SensorResponse::unsafe_arena_set_allocated_traffic_sign(
    std::string* traffic_sign) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (traffic_sign != nullptr) {
    
  } else {
    
  }
  traffic_sign_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      traffic_sign, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla.SensorResponse.traffic_sign)
}

// string status = 8;
inline void SensorResponse::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SensorResponse::status() const {
  // @@protoc_insertion_point(field_get:carla.SensorResponse.status)
  return _internal_status();
}
inline void SensorResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:carla.SensorResponse.status)
}
inline std::string* SensorResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:carla.SensorResponse.status)
  return _internal_mutable_status();
}
inline const std::string& SensorResponse::_internal_status() const {
  return status_.Get();
}
inline void SensorResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SensorResponse::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carla.SensorResponse.status)
}
inline void SensorResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carla.SensorResponse.status)
}
inline void SensorResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carla.SensorResponse.status)
}
inline std::string* SensorResponse::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SensorResponse::release_status() {
  // @@protoc_insertion_point(field_release:carla.SensorResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SensorResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carla.SensorResponse.status)
}
inline std::string* SensorResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla.SensorResponse.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SensorResponse::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla.SensorResponse.status)
}

// bool sensor_ok = 9;
inline void SensorResponse::clear_sensor_ok() {
  sensor_ok_ = false;
}
inline bool SensorResponse::_internal_sensor_ok() const {
  return sensor_ok_;
}
inline bool SensorResponse::sensor_ok() const {
  // @@protoc_insertion_point(field_get:carla.SensorResponse.sensor_ok)
  return _internal_sensor_ok();
}
inline void SensorResponse::_internal_set_sensor_ok(bool value) {
  
  sensor_ok_ = value;
}
inline void SensorResponse::set_sensor_ok(bool value) {
  _internal_set_sensor_ok(value);
  // @@protoc_insertion_point(field_set:carla.SensorResponse.sensor_ok)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace carla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_carla_2eproto
